(function() {var implementors = {};
implementors["erasable"] = [{"text":"impl&lt;P&gt; Freeze for <a class=\"struct\" href=\"erasable/struct.Thin.html\" title=\"struct erasable::Thin\">Thin</a>&lt;P&gt;","synthetic":true,"types":["erasable::Thin"]}];
implementors["ptr_union"] = [{"text":"impl&lt;A, B&gt; Freeze for <a class=\"struct\" href=\"ptr_union/struct.Union2.html\" title=\"struct ptr_union::Union2\">Union2</a>&lt;A, B&gt;","synthetic":true,"types":["ptr_union::Union2"]},{"text":"impl&lt;A, B, C, D&gt; Freeze for <a class=\"struct\" href=\"ptr_union/struct.Union4.html\" title=\"struct ptr_union::Union4\">Union4</a>&lt;A, B, C, D&gt;","synthetic":true,"types":["ptr_union::Union4"]},{"text":"impl&lt;A, B&gt; Freeze for <a class=\"struct\" href=\"ptr_union/struct.Builder2.html\" title=\"struct ptr_union::Builder2\">Builder2</a>&lt;A, B&gt;","synthetic":true,"types":["ptr_union::Builder2"]},{"text":"impl&lt;A, B, C, D&gt; Freeze for <a class=\"struct\" href=\"ptr_union/struct.Builder4.html\" title=\"struct ptr_union::Builder4\">Builder4</a>&lt;A, B, C, D&gt;","synthetic":true,"types":["ptr_union::Builder4"]},{"text":"impl&lt;A, B&gt; Freeze for <a class=\"enum\" href=\"ptr_union/enum.Enum2.html\" title=\"enum ptr_union::Enum2\">Enum2</a>&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":["ptr_union::Enum2"]},{"text":"impl&lt;A, B, C, D&gt; Freeze for <a class=\"enum\" href=\"ptr_union/enum.Enum4.html\" title=\"enum ptr_union::Enum4\">Enum4</a>&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["ptr_union::Enum4"]}];
implementors["rc_borrow"] = [{"text":"impl&lt;'a, T:&nbsp;?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; Freeze for <a class=\"struct\" href=\"rc_borrow/struct.ArcBorrow.html\" title=\"struct rc_borrow::ArcBorrow\">ArcBorrow</a>&lt;'a, T&gt;","synthetic":true,"types":["rc_borrow::ArcBorrow"]},{"text":"impl&lt;'a, T:&nbsp;?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; Freeze for <a class=\"struct\" href=\"rc_borrow/struct.RcBorrow.html\" title=\"struct rc_borrow::RcBorrow\">RcBorrow</a>&lt;'a, T&gt;","synthetic":true,"types":["rc_borrow::RcBorrow"]}];
implementors["rc_box"] = [{"text":"impl&lt;T:&nbsp;?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; Freeze for <a class=\"struct\" href=\"rc_box/struct.ArcBox.html\" title=\"struct rc_box::ArcBox\">ArcBox</a>&lt;T&gt;","synthetic":true,"types":["rc_box::ArcBox"]},{"text":"impl&lt;T:&nbsp;?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; Freeze for <a class=\"struct\" href=\"rc_box/struct.RcBox.html\" title=\"struct rc_box::RcBox\">RcBox</a>&lt;T&gt;","synthetic":true,"types":["rc_box::RcBox"]}];
implementors["slice_dst"] = [{"text":"impl&lt;Header, Item&gt; Freeze for <a class=\"struct\" href=\"slice_dst/struct.SliceWithHeader.html\" title=\"struct slice_dst::SliceWithHeader\">SliceWithHeader</a>&lt;Header, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":["slice_dst::provided_types::SliceWithHeader"]},{"text":"impl&lt;Header&gt; Freeze for <a class=\"struct\" href=\"slice_dst/struct.StrWithHeader.html\" title=\"struct slice_dst::StrWithHeader\">StrWithHeader</a>&lt;Header&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Header: Freeze,&nbsp;</span>","synthetic":true,"types":["slice_dst::provided_types::StrWithHeader"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()